<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<MDIWindow xmlns="flexlib.mdi.containers.*" 
	       xmlns:mx="http://www.adobe.com/2006/mxml" 
	       showCloseButton="true"
		   initialize="init()"
	       creationComplete="onCreationComplete()"
		   xmlns:mate="http://mate.asfusion.com/" 
		   title="{ResourceUtil.getInstance().getString('bbb.shortcuthelp.title')}" >
		   
	<mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="localeChanged" />
	<mate:Listener type="{MDIWindowEvent.CLOSE}" method="focusButton" />
	
	<mx:Script>
		<![CDATA[
			import flash.events.Event;
			import com.asfusion.mate.events.Dispatcher;
			import flexlib.mdi.events.MDIWindowEvent;
			
			import flexlib.controls.textClasses.StringBoundaries;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.main.model.ShortcutOptions;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private var genKeys:ArrayList;
			private var presKeys:ArrayList;
			private var chatKeys:ArrayList;
			private var userKeys:ArrayList;
			private var pollKeys:ArrayList;
			private var pollVoteKeys:ArrayList;
			
			[Bindable] private var generalString:String = ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.general");
			[Bindable] private var presentationString:String = ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.presentation");
			[Bindable] private var chatString:String = ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.chat");
			[Bindable] private var userString:String = ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.users");
			[Bindable] private var pollString:String = ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.polling");
			[Bindable] private var pollVoteString:String = ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.polling2");
						
			private var presResource:Array = ['bbb.shortcutkey.present.focusslide', /*'bbb.shortcutkey.whiteboard.undo',*/ 'bbb.shortcutkey.present.upload',  
											  'bbb.shortcutkey.present.previous', 'bbb.shortcutkey.present.select', 'bbb.shortcutkey.present.next', 	
											  'bbb.shortcutkey.present.fitWidth', 'bbb.shortcutkey.present.fitPage'];
			
			private var chatResource:Array = ['bbb.shortcutkey.chat.focusTabs', 'bbb.shortcutkey.chat.focusBox', 'bbb.shortcutkey.chat.sendMessage',
											  'bbb.shortcutkey.chat.explanation', 'bbb.shortcutkey.chat.chatbox.gofirst', 'bbb.shortcutkey.chat.chatbox.goback',
											  'bbb.shortcutkey.chat.chatbox.advance', 'bbb.shortcutkey.chat.chatbox.golatest', 'bbb.shortcutkey.chat.chatbox.repeat', 
											  'bbb.shortcutkey.chat.chatbox.goread'];
			
			private var userResource:Array = ['bbb.shortcutkey.users.focusUsers', 'bbb.shortcutkey.users.makePresenter', 'bbb.shortcutkey.users.mute', 
											  /*'bbb.shortcutkey.users.kick',*/ 'bbb.shortcutkey.users.muteall'];
			
			private var pollResource:Array = ['bbb.shortcutkey.polling.focusTitle', 'bbb.shortcutkey.polling.focusQuestion', 'bbb.shortcutkey.polling.focusAnswers', 
											  'bbb.shortcutkey.polling.focusMultipleCB', 'bbb.shortcutkey.polling.focusWebPollCB', 'bbb.shortcutkey.polling.previewClick', 
											  'bbb.shortcutkey.polling.cancelClick', 'bbb.shortcutkey.polling.modify', 'bbb.shortcutkey.polling.publish', 
											  'bbb.shortcutkey.polling.save', 'bbb.shortcutkey.pollStats.explanation', 'bbb.shortcutkey.polling.focusWebPoll', 
											  'bbb.shortcutkey.polling.focusData', 'bbb.shortcutkey.polling.refresh', 'bbb.shortcutkey.polling.stopPoll', 
											  'bbb.shortcutkey.polling.repostPoll', 'bbb.shortcutkey.polling.closeStatsWindow'];
			
			private var pollVoteResource:Array = ['bbb.shortcutkey.polling.focusVoteQuestion', 'bbb.shortcutkey.polling.vote'];
			
			[Bindable]
			private var shownKeys:ArrayCollection;
			
			[Bindable]
			private var baseIndex:int = 100;
			
			private var modifier:String;
			private var globalModifier:String;
			
			private function init():void {
				modifier = ExternalInterface.call("determineModifier");
				globalModifier = ExternalInterface.call("determineGlobalModifier");
				populateModules();
			}
			
			private function onCreationComplete():void {
				localeChanged();
				titleBarOverlay.tabIndex = baseIndex;
				
				minimizeBtn.tabIndex = baseIndex + 1;
				maximizeRestoreBtn.tabIndex = baseIndex + 2;
				closeBtn.tabIndex = baseIndex + 3;
			}
			
			private function populateModules():void{
				categoryAC.addItem(generalString);
				if (ShortcutOptions.usersActive)
					categoryAC.addItem(userString);
				
				if (ShortcutOptions.presentationActive)
					categoryAC.addItem(presentationString);
				
				if (ShortcutOptions.chatActive)
					categoryAC.addItem(chatString);
				
				if (ShortcutOptions.pollingActive){
					categoryAC.addItem(pollString);
					categoryAC.addItem(pollVoteString);
				}
			}
			
			private function reloadKeys():void {
				genKeys = loadKeys(ShortcutOptions.genResource, true);
				presKeys = loadKeys(presResource);
				chatKeys = loadKeys(chatResource);
				userKeys = loadKeys(userResource);
				pollKeys = loadKeys(pollResource);
				pollVoteKeys = loadKeys(pollVoteResource);
				
				changeArray();
			}
			
			public override function close(event:MouseEvent = null):void{
				var dispatcher:Dispatcher = new Dispatcher();
				dispatcher.dispatchEvent(new ShortcutEvent(ShortcutEvent.FOCUS_SHORTCUT_BUTTON));
				super.close(event);
			}
			
			private function changeArray():void {
				shownKeys = new ArrayCollection();
				
				switch(categories.selectedIndex) {
					case 0: //General
					shownKeys.addAll(genKeys);
					break;
					case categoryAC.getItemIndex(presentationString): //Presentation
					shownKeys.addAll(presKeys);
					break;
					case categoryAC.getItemIndex(chatString): //Chat
					shownKeys.addAll(chatKeys);
					break;
					case categoryAC.getItemIndex(userString): //Users
					shownKeys.addAll(userKeys);
					break;
					case categoryAC.getItemIndex(pollString): //Polling, Presenter
					shownKeys.addAll(pollKeys);
					break;
					case categoryAC.getItemIndex(pollVoteString): //Polling, Viewer
					shownKeys.addAll(pollVoteKeys);
					break;
				}
			}
			
			private function loadKeys(resource:Array, global:Boolean=false):ArrayList {
				var keyList:ArrayList = new ArrayList();
				var keyCombo:String;
				var mod:String;
				
				if (global)
					mod = globalModifier;
				else
					mod = modifier;
				
				for (var i:int = 0; i < resource.length; i++) {
					keyCombo = ResourceUtil.getInstance().getString(resource[i]);
					var key:int = int(keyCombo);
					var convKey:String;
					
					// Special cases where the keycodes don't render a sensible character
					switch (key) {
						case 32 :
							convKey = ResourceUtil.getInstance().getString('bbb.shortcutkey.specialKeys.space');
						  	break;
						case 37 :
							convKey = ResourceUtil.getInstance().getString('bbb.shortcutkey.specialKeys.left');
							break;
						case 38 :
							convKey = ResourceUtil.getInstance().getString('bbb.shortcutkey.specialKeys.up');
							break;
						case 39 :
							convKey = ResourceUtil.getInstance().getString('bbb.shortcutkey.specialKeys.right');
							break;
						case 40 :
							convKey = ResourceUtil.getInstance().getString('bbb.shortcutkey.specialKeys.down');
							break;
						case 189 :
							convKey = ResourceUtil.getInstance().getString('bbb.shortcutkey.specialKeys.minus');
						  	break;
						case 187 :
							convKey = ResourceUtil.getInstance().getString('bbb.shortcutkey.specialKeys.plus');
						  	break;
						default:
							convKey = String.fromCharCode(key);
							break;
					}
					
					if (keyCombo == "----"){
						keyList.addItem({shortcut:(ResourceUtil.getInstance().getString(resource[i] + '.function')), func:""});
					//} else if (convKey == "Left" || convKey == "Up" || convKey == "Right" || convKey == "Down"){
					} else if (convKey == ResourceUtil.getInstance().getString('bbb.shortcutkey.specialKeys.left') 
								|| convKey == ResourceUtil.getInstance().getString('bbb.shortcutkey.specialKeys.up') 
								|| convKey == ResourceUtil.getInstance().getString('bbb.shortcutkey.specialKeys.right') 
								|| convKey == ResourceUtil.getInstance().getString('bbb.shortcutkey.specialKeys.down')){
						keyList.addItem({shortcut:convKey, func:(ResourceUtil.getInstance().getString(resource[i] + '.function'))});
					}
					else{
						keyList.addItem({shortcut:mod + convKey, func:(ResourceUtil.getInstance().getString(resource[i] + '.function'))});
					}
				}
				return keyList;
			}
			
			private function localeChanged(e:LocaleChangeEvent = null):void{
				reloadKeys();
				resourcesChanged();
			}
			
			override protected function resourcesChanged():void{
				super.resourcesChanged();				
				
				this.title = ResourceUtil.getInstance().getString('bbb.shortcuthelp.title');
				
				if (titleBarOverlay != null) {
					titleBarOverlay.accessibilityName = ResourceUtil.getInstance().getString('bbb.shortcuthelp.titleBar');
				}
				
				if (windowControls != null) {
					minimizeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.minimizeBtn.toolTip");
					minimizeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.shortcuthelp.minimizeBtn.accessibilityName");
					
					maximizeRestoreBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.maximizeRestoreBtn.toolTip");
					maximizeRestoreBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.shortcuthelp.maximizeRestoreBtn.accessibilityName");
					
					maximizeRestoreBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.closeBtn.toolTip");
					maximizeRestoreBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.shortcuthelp.closeBtn.accessibilityName");
				}
			}
			
			public function focusCategories():void { //actually focuses the datagrid instead
				focusManager.setFocus(keyList);
				keyList.drawFocus(true);
			}
			
			public function focusHead():void {
				focusManager.setFocus(titleBarOverlay);
			}
			
			public function focusButton(e:MDIWindowEvent):void{
				LogUtil.debug("Caught close event from window");
				var dispatcher:Dispatcher = new Dispatcher();
				dispatcher.dispatchEvent(new ShortcutEvent(ShortcutEvent.FOCUS_SHORTCUT_BUTTON));
			}
		]]>
	</mx:Script>
	
	<mx:ComboBox id="categories" labelField="Please select an area for which to view shortcut keys: " 
				 editable="false" 
				 change="changeArray()"
				 tabIndex="{baseIndex + 10}">
		<mx:ArrayCollection id="categoryAC">
        	<!--
			<mx:String>{ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.general")}</mx:String>
         	<mx:String>{ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.presentation")}</mx:String>
         	<mx:String>{ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.chat")}</mx:String>
         	<mx:String>{ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.users")}</mx:String>
			<mx:String>{ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.polling")}</mx:String>
			<mx:String>{ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.polling2")}</mx:String>
			-->
      	</mx:ArrayCollection>
	</mx:ComboBox>
	<mx:DataGrid id="keyList" draggableColumns="false" dataProvider="{shownKeys}" width="100%" height="100%" tabIndex="{baseIndex + 15}" >
		<mx:columns>
			<mx:DataGridColumn dataField="shortcut" headerText="{ResourceUtil.getInstance().getString('bbb.shortcuthelp.headers.shortcut')}"/>
			<mx:DataGridColumn dataField="func" headerText="{ResourceUtil.getInstance().getString('bbb.shortcuthelp.headers.function')}"/>
		</mx:columns>
	</mx:DataGrid>
</MDIWindow>