<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
				xmlns:mate="http://mate.asfusion.com/" 
				width="600" height="350" 
				creationComplete="initDefaultMic()" 
				styleName="micSettingsWindowStyle"
				showCloseButton="false" 
				close="onCancelClicked()" 
				keyDown="handleKeyDown(event)">
	
	<mx:Script>
		<![CDATA[
      import flash.system.Security;
      import flash.system.SecurityPanel;
      import flash.ui.Keyboard;
      
      import mx.events.CloseEvent;
      import mx.events.ItemClickEvent;
      import mx.managers.PopUpManager;
      
      import org.bigbluebutton.common.Images;
      import org.bigbluebutton.common.LogUtil;
      import org.bigbluebutton.core.BBB;
      import org.bigbluebutton.main.events.BBBEvent;
      import org.bigbluebutton.main.events.ShortcutEvent;
      import org.bigbluebutton.util.i18n.ResourceUtil;
			
			[Embed(source="assets/audio-test.mp3")]
			[Bindable] private var soundClass:Class;
			private var sound:Sound = new soundClass() as Sound;			
			private var soundChannel:SoundChannel;
			
			private var timer:Timer;
			private var mic:Microphone;
			private var playingAudio:Boolean = false;
			private var images:Images = new Images();
			[Bindable] private var cancelIcon:Class = images.cancel;
            
            [Bindable]private var baseIndex:int = 1;
			
      override public function move(x:Number, y:Number):void
      {
        return;
      }
      
			private function initDefaultMic():void {
				mic = Microphone.getMicrophone();
				
				if (mic != null) {
					if (mic.muted) {
						// user has disallowed access to the mic
						mic.addEventListener(StatusEvent.STATUS, micStatusEventHandler);
                        // when we open the window show the default acceptor first and then the custom one every other time
						mic.setLoopBack(true);
                        mic.setLoopBack(false);
					} else {
						// user has allowed access to the mic
						mic.setLoopBack(false);
            mic.setUseEchoSuppression(true);
					}
				} else {
					LogUtil.warn("Microphone is used by another application.");
				}
				timer = new Timer(100);
				timer.addEventListener(TimerEvent.TIMER, updateMicLevel);
				//timer.start(); Commenting this out because the mic level has been removed
			}
			
			// Added by Chad to enable closing the window without clicking the X
			private function handleKeyDown(event:KeyboardEvent):void {
				if (event.charCode == Keyboard.ESCAPE) {
					this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				}
			}
			
			private function micStatusEventHandler(event:StatusEvent):void {					
				switch(event.code) {
					case "Microphone.Muted":						
						LogUtil.warn("Access to microphone has been denied.");
						break;
					case "Microphone.Unmuted":
//						mic.setLoopBack(true);
//            mic.setUseEchoSuppression(true);
						LogUtil.debug("Access to the microphone has been allowed.");
						break;
					default:
						LogUtil.debug("unknown micStatusHandler event: " + event);
				}
			}			
			
			private function updateMicLevel(e:TimerEvent):void{
				if (mic != null) {
//					mic1Label.text = mic.name;
//					micLevel1.setProgress(mic.activityLevel, 100);					
				}
			}
			
			public function playButtonClickHandler():void {
				if (playButton.selected) {
					soundChannel = sound.play();  
					playingAudio = true;
				} else {
					soundChannel.stop();
					playButton.label = ResourceUtil.getInstance().getString('bbb.micSettings.playSound');
					playingAudio = false;
				}	                     
			}
			
			
            private function showMicSettingsPanel():void {
                if (settingBtn.selected) {
                    if (mic != null) {
                        if (mic.muted) {
                            Security.showSettings(SecurityPanel.PRIVACY);
                            settingBtn.selected = false;
                            return;
                        } else {
                            mic.setLoopBack(true);
                            mic.setUseEchoSuppression(true);
                            Security.showSettings(SecurityPanel.MICROPHONE);
                        }
                    }
                } else {
                    mic.setLoopBack(false);
                }	
			}
			
			private function onJoinClicked():void {
                // Do one last check for if the mic has been allowed.
                // This must come first because cleanUp() will destroy mic 
                if (mic != null && mic.muted) {
                    Security.showSettings(SecurityPanel.PRIVACY);
                }
                
				cleanUp();      
				var joinEvent:BBBEvent = new BBBEvent("JOIN_VOICE_CONFERENCE_EVENT");
				joinEvent.payload['useMicrophone'] = true;
				dispatchEvent(joinEvent);
				PopUpManager.removePopUp(this);
			}	
			
			private function onCancelClicked():void {
				cleanUp();
				var event:BBBEvent = new BBBEvent(BBBEvent.MIC_SETTINGS_CLOSED);
				event.payload['clicked'] = "cancel";
				dispatchEvent(event);
				PopUpManager.removePopUp(this);
			}
			
			private function cleanUp():void {
				timer.stop();
				mic.setLoopBack(false);
				mic = null;
				if (playingAudio) soundChannel.stop();				
			}
			
			private var DEFAULT_HELP_URL:String = "http://www.bigbluebutton.org/content/videos";
			private function onHelpButtonClicked():void {
        DEFAULT_HELP_URL =  BBB.initConfigManager().config.help.url;
				navigateToURL(new URLRequest(DEFAULT_HELP_URL));
			}
		]]>
	</mx:Script>
	<mx:VBox width="100%" height="100%"  paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
    
		<mx:Canvas width="100%">
			<!-- mx:Label text="Audio Settings" styleName="micSettingsWindowTitleStyle"/ -->
			<mx:TextArea borderSkin="{null}" editable="false" text="{ResourceUtil.getInstance().getString('bbb.users.settings.audioSettings')}" styleName="micSettingsWindowTitleStyle"
                         tabIndex="{baseIndex}" width="400" left="0"/>
						 <!-- accessibilityName="{ResourceUtil.getInstance().getString('bbb.micSettings.access.title')} "/ -->
            <mx:LinkButton fontSize="10" toolTip="{ResourceUtil.getInstance().getString('bbb.mainToolbar.helpBtn')}" 
                           styleName="micSettingsWindowHelpButtonStyle" right="0"
                           click="onHelpButtonClicked()"
                           tabIndex="{baseIndex+1}"
                           accessibilityName="{ResourceUtil.getInstance().getString('bbb.micSettings.access.helpButton')}"/>
		</mx:Canvas>
    
        <mx:VBox width="100%" paddingTop="5">
            <mx:HRule width="100%"/>
            <mx:Label id="testMicLabel" text="{ResourceUtil.getInstance().getString('bbb.micSettings.microphone.header')}" styleName="micSettingsWindowTestMicrophoneLabelStyle" width="100%" tabIndex="{baseIndex+2}"/>
        </mx:VBox>   
        
        <mx:HBox width="100%">      
            <mx:Text width="100%" text="{ResourceUtil.getInstance().getString('bbb.micSettings.speakIntoMic')}"
                     styleName="micSettingsWindowSpeakIntoMicLabelStyle" tabIndex="{baseIndex+3}"/>
            <mx:Button id="settingBtn" label="{ResourceUtil.getInstance().getString('bbb.micSettings.changeMic')}" 
                       styleName="micSettingsWindowChangeMicButtonStyle" toggle="true"
                       click="showMicSettingsPanel()" tabIndex="{baseIndex+4}"
                       toolTip="{ResourceUtil.getInstance().getString('bbb.micSettings.changeMic.toolTip')}"/>		
        </mx:HBox>
        
        <mx:Label id="testSpeakersLabel" text="{ResourceUtil.getInstance().getString('bbb.micSettings.speakers.header')}" styleName="micSettingsWindowTestSpeakersLabelStyle" paddingTop="5" tabIndex="{baseIndex+5}"/>
        
        <mx:HBox width="100%">
            <mx:Text width="100%" text="{ResourceUtil.getInstance().getString('bbb.micSettings.hearFromHeadset')}"
                     styleName="micSettingsWindowHearFromHeadsetLabelStyle" tabIndex="{baseIndex+6}"/>
            <mx:Button id="playButton" label="{ResourceUtil.getInstance().getString('bbb.micSettings.playSound')}" 
                       click="playButtonClickHandler()" toggle="true" styleName="micSettingsWindowPlaySoundButtonStyle"
                       toolTip="{ResourceUtil.getInstance().getString('bbb.micSettings.playSound.toolTip')}"
                       tabIndex="{baseIndex+7}" />		
        </mx:HBox>
        
    <mx:HRule width="100%"/>
    <mx:Spacer height="20"/>
		<mx:HBox width="100%" horizontalAlign="right" horizontalGap="18">
			<mx:Button id="okBtn" label="{ResourceUtil.getInstance().getString('bbb.micSettings.join')}" 
					   styleName="micSettingsWindowJoinButtonStyle"
					   click="onJoinClicked()" tabIndex="{baseIndex+8}"/>
			<mx:Button id="cancelBtn" label="{ResourceUtil.getInstance().getString('bbb.micSettings.cancel')}" 
					   styleName="micSettingsWindowCancelButtonStyle"
					   click="onCancelClicked()" tabIndex="{baseIndex+9}"
					   toolTip="{ResourceUtil.getInstance().getString('bbb.micSettings.cancel.toolTip')}"/>
		</mx:HBox>
		
	</mx:VBox>		
</mx:TitleWindow>
