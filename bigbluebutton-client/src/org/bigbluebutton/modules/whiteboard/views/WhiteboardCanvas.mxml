<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:mate="http://mate.asfusion.com/"	 
    creationComplete="init()" visible="false" mouseOver="setCursor(toolType)" mouseOut="removeCursor()" implements="org.bigbluebutton.common.IBbbCanvas">
	<mx:Script>
		<![CDATA[		
            import com.asfusion.mate.events.Dispatcher;
			
			import mx.core.UIComponent;
			import mx.managers.CursorManager;
			
			import org.bigbluebutton.common.IBbbCanvas;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.modules.whiteboard.WhiteboardCanvasDisplayModel;
			import org.bigbluebutton.modules.whiteboard.WhiteboardCanvasModel;
			import org.bigbluebutton.modules.whiteboard.business.shapes.DrawObject;
			import org.bigbluebutton.modules.whiteboard.business.shapes.GraphicObject;
			import org.bigbluebutton.modules.whiteboard.business.shapes.ShapeFactory;
			import org.bigbluebutton.modules.whiteboard.business.shapes.TextObject;
			import org.bigbluebutton.modules.whiteboard.events.PageEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardButtonEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardDrawEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardSettingResetEvent;
			import org.bigbluebutton.modules.whiteboard.models.Annotation;
			
			public var model:WhiteboardCanvasModel;	
            public var displayModel:WhiteboardCanvasDisplayModel;
            
			public var textToolbar:WhiteboardTextToolbar;		
			private var bbbCanvas:IBbbCanvas;
			private var _xPosition:int;
			private var _yPosition:int;
			private var images:Images = new Images();
			[Bindable] private var select_icon:Class = images.select_icon;
			[Bindable] private var pencil_icon:Class = images.pencil_icon;
			[Bindable] private var rectangle_icon:Class = images.square_icon;
			[Bindable] private var triangle_icon:Class = images.triangle_icon;
			[Bindable] private var ellipse_icon:Class = images.circle_icon;
			[Bindable] private var line_icon:Class = images.line_icon;
			[Bindable] private var text_icon:Class = images.text_icon;
			[Bindable] private var eraser_icon:Class = images.eraser_icon;
			[Bindable] private var highlighter_icon:Class = images.highlighter_icon;
			private var toolType:String = DrawObject.PENCIL;
			private var whiteboardEnabled:Boolean = false;
			private var showWhiteboard:Boolean = true;
			private var currentDrawingCanvas:IBbbCanvas;
			private var selectionBorder:UIComponent = null;
			private var resizingButtons:Array = new Array();
          
			private function init():void {
				this.label = "Highlighter";
                registerForMouseEvents();
			}
            
            public function queryForAnnotationHistory():void {
                var dispatcher:Dispatcher = new Dispatcher();
                dispatcher.dispatchEvent(new WhiteboardDrawEvent(WhiteboardDrawEvent.GET_ANNOTATION_HISTORY));
            }
			
            public function registerForMouseEvents():void {
                addEventListener(MouseEvent.MOUSE_DOWN, doMouseDown);
                addEventListener(MouseEvent.MOUSE_UP, doMouseUp);
                addEventListener(MouseEvent.MOUSE_MOVE, doMouseMove);
                stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
                stage.addEventListener(KeyboardEvent.KEY_UP, onKeyUp);               
            }
            
            public function unregisterForMouseEvents():void {
                removeEventListener(MouseEvent.MOUSE_DOWN, doMouseDown);
                removeEventListener(MouseEvent.MOUSE_UP, doMouseUp);
                removeEventListener(MouseEvent.MOUSE_MOVE, doMouseMove);
                stage.removeEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
                stage.removeEventListener(KeyboardEvent.KEY_UP, onKeyUp);
            }
            
            private function onKeyDown(event:KeyboardEvent):void {
                model.onKeyDown(event); 
            }
            
            private function onKeyUp(event:KeyboardEvent):void {
                model.onKeyUp(event);
            }
            
			private function doMouseUp(event:Event):void {
				model.doMouseUp(this.mouseX, this.mouseY);
			}
						
			private function doMouseDown(event:Event):void {
                displayModel.doMouseDown(this.mouseX, this.mouseY);
				model.doMouseDown(this.mouseX, this.mouseY);
			}
						
			private function doMouseMove(event:Event):void {
				model.doMouseMove(this.mouseX, this.mouseY);
			}
			
			
			public function setShape(s:String):void {
//                LogUtil.debug("SET SHAPE [" + s + "]");
//				model.setShape(s);
			}
				
			public function changeColor(e:Event):void {
				model.changeColor(e.target.selectedColor);
			}
	

			public function sendGraphicToServer(gobj:Annotation, type:String):void {
 //               LogUtil.debug("DISPATCHING SEND sendGraphicToServer [" + type + "]");
				var event:WhiteboardDrawEvent = new WhiteboardDrawEvent(type);
				event.annotation = gobj;
                var dispatcher:Dispatcher = new Dispatcher();
                dispatcher.dispatchEvent(event);					
			}
			
			public function setGraphicType(type:String):void {
                if (model == null) return;
				model.setGraphicType(type);
			}
			
			public function setTool(s:String):void {
                if (model == null) return;
				model.setTool(s);
				toolType = s;
			}
			
			public function changeFillColor(e:Event):void {
//				model.changeFillColor(e.target.selectedColor);
			}
			
			public function changeThickness(e:Event):void {
				model.changeThickness(e.target.value);
			}
			
			public function toggleFill():void {
//				model.toggleFill();
			}
			
			public function toggleTransparency():void {
//				model.toggleTransparency();
			}
			
			public function get xPosition():int {
				return _xPosition;
			}
			
			public function get yPosition():int {
				return _yPosition;
			}
			
			public function set xPosition(x:int):void {
				_xPosition = x;
			}
			
			public function set yPosition(y:int):void {
				_yPosition = y;
			}
			
			public function modifySelectedTextObject(fgColor:uint, bgColorVisible:Boolean, backgroundColor:uint, textSize:Number):void {
//                LogUtil.debug("modifying text size = " + textSize);
				displayModel.modifySelectedTextObject(fgColor, bgColorVisible, backgroundColor, textSize);
			}
			
			public function makeTextObjectsEditable(e:MadePresenterEvent):void {
//				model.makeTextObjectsEditable(e);
			}
			
			public function makeTextObjectsUneditable(e:MadePresenterEvent):void {
//				model.makeTextObjectsUneditable(e);
			}

			public function makeTextObjectEditable(tobj:TextObject):void {
				LogUtil.debug("canvas makeTextObjectEditable");
				displayModel.makeTextObjectEditable(tobj);
				tobj.removeEventListener(MouseEvent.MOUSE_DOWN, onGraphicMouseDown);
			}
			
			private function setWhiteboardVisibility():void {
                if (this.whiteboardEnabled && this.showWhiteboard) {
                    this.visible = true;
                    registerForMouseEvents();
                } else {
                    this.visible = false;
                    setDrawingCanvasToSlide();
                    unregisterForMouseEvents();
                }
			}
			
			/* added this functionality in WhiteboardToolbar.mxml instead to allow a variety of cursors */			
			public function setCursorPencil():void {
				CursorManager.setCursor(pencil_icon);
			}
			
			public function setCursor(toolType:String):void {
				if(toolType == DrawObject.ELLIPSE) {
					CursorManager.setCursor(ellipse_icon);
				} else if(toolType == DrawObject.RECTANGLE) {
					CursorManager.setCursor(rectangle_icon);
				} else if(toolType == DrawObject.TRIANGLE) {
					CursorManager.setCursor(triangle_icon, 2, -7, 0);
				} else if(toolType == DrawObject.PENCIL) {
					CursorManager.setCursor(pencil_icon, 2, 0, -16);
				} else if(toolType == DrawObject.LINE) {
					CursorManager.setCursor(line_icon, 2, 0, -14);
				} else if(toolType == DrawObject.HIGHLIGHTER) {
					CursorManager.setCursor(highlighter_icon);
				} else if(toolType == DrawObject.ERASER) {
					CursorManager.setCursor(eraser_icon);
				} else if(toolType == TextObject.TEXT_TOOL) {
					CursorManager.setCursor(text_icon);
//				} else if(toolType == SelectObject.SELECT_TOOL) {
//					CursorManager.setCursor(select_icon);
				} 
			}
			
			private function removeCursor():void {
				CursorManager.removeCursor(CursorManager.currentCursorID);
			}
			
			/** Inherited from org.bigbluebutton.common.IBbbCanvas*/
			public function addRawChild(child:DisplayObject):void {
				addRawChildConcerningEvent(child, false);
			}
			
			public function removeRawChild(child:DisplayObject):void {
				if(currentDrawingCanvas == this) {
					LogUtil.debug("Remove raw child from whiteboard");
					this.rawChildren.removeChild(child);
				} else {
					LogUtil.debug("Remove raw child from slide");
					this.bbbCanvas.removeRawChild(child);
				}
			}
			
			public function doesContain(child:DisplayObject):Boolean {
				if (currentDrawingCanvas == this) {
					return this.rawChildren.contains(child);
				}
				return bbbCanvas.doesContain(child);
			}
			
			public function acceptOverlayCanvas(overlay:IBbbCanvas):void {
//				LogUtil.debug("WhiteboardCanvas::acceptOverlayCanvas()");
//				LogUtil.debug("OVERLAYING PRESENTATION CANVAS");
                
				this.bbbCanvas = overlay;
				currentDrawingCanvas = overlay;
				//Load existing shapes onto the canvas.
				dispatchEvent(new PageEvent(PageEvent.LOAD_PAGE));
                
                /**
                * Check if this is the first time we overlayed the whiteboard canvas into the
                * presentation canvas. If so, query for annotations history.
                */
                if (! displayModel.canvasInited) {
                    displayModel.parentCanvasInitialized();
                    queryForAnnotationHistory();
                }
                    
			}
			
			public function moveCanvas(x:Number, y:Number):void {
				this.x = x;
				this.y = y;
			}
			
			public function getMouseXY():Array {
				return [this.mouseX, this.mouseY];
			}
			
			public function removeGraphic(child:DisplayObject):void {
				if (bbbCanvas == null) return;
				if (doesContain(child)) removeRawChild(child);
			}
			
			public function addGraphic(child:DisplayObject):void {
				if (bbbCanvas == null) return;
				addRawChild(child);
			}
			
			public function zoomCanvas(width:Number, height:Number, zoomPercentage:Number):void {
				this.width = width;
				this.height = height;	
				displayModel.zoomCanvas(width, height, zoomPercentage);
                model.zoomCanvas(width, height, zoomPercentage);
				textToolbar.adjustForZoom(width, height);
			}
					
			public function showCanvas(show:Boolean):void{
				this.showWhiteboard = show;
                
				setWhiteboardVisibility();
			}
			
			/** End IBBBCanvas*/		
			public function isPageEmpty():Boolean {
				return displayModel.isPageEmpty();
			}
			
			public function enableWhiteboard(e:WhiteboardButtonEvent):void{
				this.whiteboardEnabled = true;
				setWhiteboardVisibility();
                useHandCursor = false;
			}
			
			public function disableWhiteboard(e:WhiteboardButtonEvent):void{
				this.whiteboardEnabled = false;
				setWhiteboardVisibility();
                useHandCursor = true;
			}
			
			public function setDrawingCanvasToWhiteboard():void{
				if(currentDrawingCanvas == this.bbbCanvas) {
					LogUtil.debug("Switch Canvas to whiteboard");
					
					currentDrawingCanvas = this;
					
					// Move drawing up to whiteboard here
					var annotationList:Array = displayModel.getAnnotationList();
					
					LogUtil.debug("annotationList.length = " + annotationList.length);
					
					for (var i:int = 0; i < annotationList.length; i++) {
						LogUtil.debug(flash.utils.getQualifiedClassName(annotationList[i]));
						
						var graphic:DisplayObject = annotationList[i] as DisplayObject;
						if (this.bbbCanvas.doesContain(graphic)) {
							this.bbbCanvas.removeRawChild(graphic);
							
							this.addRawChild(graphic);
						}
					}
					
					if (selectionBorder && this.bbbCanvas.doesContain(selectionBorder)){
						this.bbbCanvas.removeRawChild(selectionBorder);
						
						this.addRawChildConcerningEvent(selectionBorder, true);
					}
					
					for (i = 0; i < resizingButtons.length; i++) {
						var button:UIComponent = resizingButtons[i] as UIComponent;
						if (this.bbbCanvas.doesContain(button)){
							this.bbbCanvas.removeRawChild(button);
							
							this.addRawChildConcerningEvent(button, true);
						}
					}
				}
			}
			
			public function setDrawingCanvasToSlide():void{
				if(currentDrawingCanvas == this) {
					LogUtil.debug("Switch Canvas to slide");
					
					currentDrawingCanvas = this.bbbCanvas;
					
					// Move drawing down to slide here
					var annotationList:Array = displayModel.getAnnotationList();
					
					LogUtil.debug("annotationList.length = " + annotationList.length);
					
					for (var i:int = 0; i < annotationList.length; i++) {
						var graphic:DisplayObject = annotationList[i] as DisplayObject;
						if (this.rawChildren.contains(graphic)) {
							graphic.removeEventListener(MouseEvent.MOUSE_DOWN, onGraphicMouseDown);
							this.rawChildren.removeChild(graphic);
							
							this.addRawChild(graphic);
						}
					}
					
					if (selectionBorder && this.rawChildren.contains(selectionBorder)){
						this.rawChildren.removeChild(selectionBorder);
						
						this.addRawChildConcerningEvent(selectionBorder, true);
					}
					
					for (i = 0; i < resizingButtons.length; i++) {
						var button:UIComponent = resizingButtons[i] as UIComponent;
						if (this.rawChildren.contains(button)){
							this.rawChildren.removeChild(button);
							
							this.addRawChildConcerningEvent(button, true);
						}
					}
				}
			}
			
			private function onGraphicMouseDown(event:MouseEvent):void{
				LogUtil.debug("Graphic mousedown fired");
				
				model.onGraphicMouseDown(event.currentTarget as DisplayObject, this.mouseX, this.mouseY);
			}
			
			private function onSelectionBorderMouseDown(event:MouseEvent):void{
				model.doSelectedShapeMouseDown(this.mouseX, this.mouseY);
			}
			
			private function clearResizingButtons():void{
				for(var i:int=0; i < resizingButtons.length; i++){
					var button:UIComponent = resizingButtons[i] as UIComponent;
					if(doesContain(button)){
						removeRawChild(button);
					}
				}								
				
				resizingButtons.length = 0;
			}
			
			public function clearSelectionBorder(clearSelectionAsWell:Boolean = false):void{
				LogUtil.debug("clearSelectionBorder");
				
				if (selectionBorder && doesContain(selectionBorder)) {
					this.removeRawChild(selectionBorder);
					
					this.clearResizingButtons();
				}
				
				if (clearSelectionAsWell) {
					model.clearSelection();
				}
			}
			
			private function drawResizeButton(x:Number, y:Number):UIComponent
			{
				var btn:UIComponent = new UIComponent;
				
				btn.graphics.lineStyle(2, 0x000000);
				btn.graphics.beginFill(0xffffff);
				btn.graphics.drawRect(0,0,7,7);
				btn.graphics.endFill();
				addRawChildConcerningEvent(btn, true);
				
				btn.x = x;
				btn.y = y;
				
				return btn;
			}
			
			public function redrawSelectionBorder():void {
				model.redrawSelectionBorder();
			}
			
			public function drawGraphicSelectionBorder(graphic:DisplayObject):void{
				LogUtil.debug("drawGraphicSelectionBorder");
				
				clearSelectionBorder();
				
				LogUtil.debug("after clearSelectionBorder");
				
				selectionBorder = new UIComponent();
				
				LogUtil.debug("after new selectorBorder");
				selectionBorder.graphics.lineStyle(2, 0x000000, 0.30);
				
				var dimensions:Array = displayModel.getAnnotationDimensions(graphic);
				var thickness:Number = displayModel.getAnnotationThickness(graphic);
				var borderX:Number = dimensions[0] - thickness - 3;
				var borderY:Number = dimensions[1] - thickness - 3;
				var borderWidth:Number = dimensions[2] + 2 * (thickness + 3);
				var borderHeight:Number = dimensions[3] + 2 * (thickness + 3);
				
				selectionBorder.graphics.beginFill(0x000000, 0);
				selectionBorder.graphics.drawRect(borderX, borderY, borderWidth, borderHeight);
				selectionBorder.graphics.endFill();
				
				selectionBorder.addEventListener(MouseEvent.MOUSE_DOWN, onSelectionBorderMouseDown);
				
				this.clearResizingButtons();
				
				resizingButtons.push(drawResizeButton(borderX - 3, borderY - 3));
				resizingButtons.push(drawResizeButton(borderX + borderWidth/2 - 3, borderY - 3));
				resizingButtons.push(drawResizeButton(borderX + borderWidth - 3, borderY - 3));
				resizingButtons.push(drawResizeButton(borderX - 3, borderY + borderHeight/2 - 3));
				resizingButtons.push(drawResizeButton(borderX + borderWidth - 3, borderY + borderHeight/2 - 3));
				resizingButtons.push(drawResizeButton(borderX - 3, borderY + borderHeight - 3));
				resizingButtons.push(drawResizeButton(borderX + borderWidth/2 - 3, borderY + borderHeight - 3));
				resizingButtons.push(drawResizeButton(borderX + borderWidth - 3, borderY + borderHeight - 3));
				
				for(var i:int=0; i < resizingButtons.length; i++){
					(function(i:int):void{
						(resizingButtons[i] as UIComponent).addEventListener(MouseEvent.MOUSE_DOWN,function():void{
							LogUtil.debug("resizingButtons " + i + " mousedown");
							model.doResizeButtonMouseDown(i, this.mouseX, this.mouseY);
						});	
					})(i);
				}
				
				LogUtil.debug("before add selectorBorder to canvas");
				addRawChildConcerningEvent(selectionBorder, true);
				
				LogUtil.debug("end drawSelectedBorderForShape");
			}
			
			public function addRawChildConcerningEvent(child:DisplayObject, shouldNotBindEvent:Boolean):void {				
				if (currentDrawingCanvas == this) {
					LogUtil.debug("Add raw child to whiteboard");
					
					this.rawChildren.addChild(child);
					
					LogUtil.debug("After rawChildren addChild line");
					
					if (!shouldNotBindEvent) {
						child.addEventListener(MouseEvent.MOUSE_DOWN, onGraphicMouseDown);
						LogUtil.debug("Add mouse down event");
					}
				} else {
					LogUtil.debug("Add raw child to slide");
					this.bbbCanvas.addRawChild(child);
				}
			}
			
			public function deleteSelectedShape():void{
				model.deleteSelectedShape();
			}
		]]>
	</mx:Script>
</mx:Canvas>
